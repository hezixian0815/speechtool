package com.aispeech.export.engines2;


import android.text.TextUtils;

import com.aispeech.AIError;
import com.aispeech.AIResult;
import com.aispeech.common.AIConstant;
import com.aispeech.common.DynamicParamUtils;
import com.aispeech.common.Log;
import com.aispeech.common.Util;
import com.aispeech.export.config.AIOneshotConfig;
import com.aispeech.export.config.AIWakeupConfig;
import com.aispeech.export.exception.IllegalPinyinException;
import com.aispeech.export.intent.AIWakeupIntent;
import com.aispeech.export.listeners.AIWakeupListener;
import com.aispeech.kernel.Utils;
import com.aispeech.kernel.Wakeup;
import com.aispeech.lite.AISpeech;
import com.aispeech.lite.Languages;
import com.aispeech.lite.base.BaseEngine;
import com.aispeech.lite.config.LocalVadConfig;
import com.aispeech.lite.config.OneshotConfig;
import com.aispeech.lite.config.WakeupConfig;
import com.aispeech.lite.oneshot.OneshotCache;
import com.aispeech.lite.param.WakeupParams;
import com.aispeech.lite.speech.SpeechListener;
import com.aispeech.lite.wakeup.WakeupProcessor;

import org.json.JSONException;
import org.json.JSONObject;

import java.io.File;
import java.lang.reflect.Array;
import java.util.Iterator;
import java.util.Locale;
import java.util.Map;


/**
 * 本地唤醒引擎
 */
public class AIWakeupEngine extends BaseEngine {
    private static final String
    private WakeupProcessor mWakeupProcessor;
    private WakeupConfig mConfig;
    private WakeupParams mParam;
    private SpeechListenerImpl mSpeechListenerImpl;
    private volatile byte[] accessionalData;

    private Languages language = Languages.CHINESE;

    private AIWakeupEngine() {
        mConfig = new WakeupConfig();
        mParam = new WakeupParams();
        mWakeupProcessor = new WakeupProcessor();
        mSpeechListenerImpl = new SpeechListenerImpl(null);
        mBaseProcessor = mWakeupProcessor;
    }

    @Override
    public String getTag() {
        return "wakeup";
    }

    /**
     * 唤醒引擎
     *
     * @return 唤醒引擎实例
     */
    public static AIWakeupEngine createInstance() {
        return new AIWakeupEngine();
    }

    public static int getOneShotCacheTime() {
        return AISpeech.getOneShotCacheTime();
    }

    /**
     * 检查唤醒内核是否准备好，外部可以不关注
     *
     * @return true or false
     */
    private static boolean checkLibValid() {
        return Wakeup.isWakeupSoValid() && Utils.isUtilsSoValid();
    }

    private byte[] getAccessionalData() {
        if (accessionalData == null)
            synchronized (this) {
                if (accessionalData == null)
                    accessionalData = Util.hexToByte(ACCESSIONALHEX);
            }
        return accessionalData;
    }

    /**
     * 唤醒引擎初始化
     *
     * @param config   配置参数
     * @param listener 唤醒相关时间的回调
     */
    public void init(AIWakeupConfig config, AIWakeupListener listener) {
        if (config == null) {
            throw new IllegalArgumentException("AIWakeupConfig can not be null!");
        }
        if (!checkLibValid()) {
            if (listener != null) {
                listener.onInit(AIConstant.OPT_FAILED);
                listener.onError(new AIError(AIError.ERR_SO_INVALID, AIError.ERR_DESCRIPTION_SO_INVALID));
            }
            Log.e(TAG, "so动态库加载失败 !");
            return;
        }
        super.init();
        parseConfig(config);
        mSpeechListenerImpl.setListener(listener);
        mWakeupProcessor.init(mSpeechListenerImpl, mConfig);
    }

    private void parseConfig(AIWakeupConfig config) {
        if (config == null) {
            Log.e(TAG, "AIWakeupConfig is null !");
            return;
        }
        Log.d(TAG, "AIWakeupConfig " + config.toString());
        super.parseConfig(config, mConfig);
        AISpeech.setOneShotCacheTime(config.getOneShotCacheTime());
        if (config.getOneshotConfig() != null) {
            mConfig.setOneshotConfig(parseOneshotConfig(config.getOneshotConfig()));
        }
        mParam.setPreWakeupOn(config.isPreWakeupOn());
        if (config.getLanguages() != null) {
            language = config.getLanguages();
        }

        final String wakeupResource = config.getWakeupResource();
        if (TextUtils.isEmpty(wakeupResource)) {
            Log.e(TAG, "wakeupResource not found !!");
        } else if (wakeupResource.startsWith("/")) {
            mConfig.setResBinPath(wakeupResource);
        } else {
            mConfig.setAssetsResNames(new String[]{wakeupResource});
            mConfig.setResBinPath(Util.getResourceDir(mConfig.getContext()) + File.separator + wakeupResource);
        }
    }

    /**
     * 解析oneshot config 配置
     *
     * @param config {@link AIOneshotConfig}
     * @return {@link  OneshotConfig}
     */
    private OneshotConfig parseOneshotConfig(AIOneshotConfig config) {
        if (config == null) {
            throw new IllegalArgumentException("AIOneshotConfig can not be null!");
        }

        OneshotConfig oneshotConfig = new OneshotConfig();

        LocalVadConfig vadConfig = new LocalVadConfig();

        vadConfig.setPauseTime(0);//oneshot set vad pauseTime 0

        if (!config.getResBin().startsWith("/")) {
            vadConfig.setAssetsResNames(new String[]{config.getResBin()});
            vadConfig.setResBinPath(Util.getResourceDir(AISpeech.getContext()) + File.separator + config.getResBin());
        } else {
            vadConfig.setResBinPath(config.getResBin());
        }

        oneshotConfig.setVadConfig(vadConfig);
        oneshotConfig.setCacheAudioTime(config.getCacheAudioTime());
        oneshotConfig.setMiddleTime(config.getMiddleTime());
        oneshotConfig.setWords(config.getWords());

        return oneshotConfig;

    }

    /**
     * 动态调整参数,只能调整唤醒词的thresh
     *
     * @param pinyin 唤醒词，必须在{@link AIWakeupIntent}设置过，参数示例：["ni hao xiao chi"]
     * @param thresh 唤醒词对应的阈值，参数示例：[0.2]
     * @see AIWakeupIntent#setWakeupWord
     * @see #setDynamicParam(String)
     */
    public void setDynamicParam(String[] pinyin, float[] thresh) {
        if (pinyin == null || pinyin.length == 0 || thresh == null || thresh.length == 0)
            return;
        if (pinyin.length != thresh.length)
            return;
        Log.i(TAG, "setDynamicParam:" + pinyin + "," + thresh);
        StringBuilder sb = new StringBuilder();
        sb.append("words=");
        for (int i = 0; i < pinyin.length; i++) {
            sb.append(pinyin[i]);
            if (i < pinyin.length - 1)
                sb.append(",");
        }
        sb.append(";thresh=");

        for (int i = 0; i < thresh.length; i++) {
            sb.append(String.format(Locale.ENGLISH, "%.3f", thresh[i]));
            if (i < thresh.length - 1)
                sb.append(",");
        }
        sb.append(";");

        setDynamicParam(sb.toString());
    }

    /**
     * 动态调整参数，具体请参照 demo
     *
     * @param dynamicParam env 里的参数，key可以是 words thresh 等, value 类型可以是 基础类型、字符串、数组、列表
     */
    public void setDynamicParamEnv(Map<String, ?> dynamicParam) {
        if (dynamicParam == null || dynamicParam.isEmpty()) {
            Log.i(TAG, "setDynamicParamEnv: dynamicParam isEmpty ");
            return;
        }
        Log.i(TAG, "setDynamicParamEnv" + dynamicParam);
        Iterator<String> iter = dynamicParam.keySet().iterator();
        StringBuilder envSb = new StringBuilder();
        while (iter.hasNext()) {
            String key = iter.next();
            Object obj = dynamicParam.get(key);
            String value;
            if (obj == null) {
                continue;
            } else if (obj instanceof Iterable) {
                value = getStringForIterator((Iterable) obj);
            } else if (obj.getClass().isArray()) {
                StringBuilder sb = new StringBuilder();
                int length = Array.getLength(obj);
                for (int i = 0; i < length; i++) {
                    sb.append(Array.get(obj, i));
                    if (i < length - 1)
                        sb.append(",");
                }
                value = sb.toString();
            } else {
                value = String.valueOf(obj);
            }
            envSb.append(key).append("=").append(value).append(";");
        }

        setDynamicParam(envSb.toString());
    }

    private String getStringForIterator(Iterable<Object> obj) {
        String value;
        StringBuilder sb = new StringBuilder();
        Iterator<Object> iterator = obj.iterator();
        while (iterator.hasNext()) {
            Object o = iterator.next();
            sb.append(o);
            if (iterator.hasNext())
                sb.append(",");
        }
        value = sb.toString();
        return value;
    }

    /**
     * 动态调整参数，参数只能是 {@link AIWakeupIntent} 内的参数，
     * 不同引擎可以动态设置的参数不一样，建议使用 {@link #setDynamicParam(String[], float[])} 方法
     *
     * @param env 参数字符串，如："words=ni hao xiao chi;thresh=0.2;"
     * @see #setDynamicParam(String[], float[])
     */
    public void setDynamicParam(String env) {
        if (TextUtils.isEmpty(env))
            return;
        Log.i(TAG, "setDynamicParam:" + env);
        JSONObject envJson = new JSONObject();
        try {
            envJson.put("env", env);
        } catch (JSONException e) {
            e.printStackTrace();
        }
        if (mWakeupProcessor != null) {
            mWakeupProcessor.set(envJson.toString());
        }
    }

    /**
     * 设置唤醒env热更新，可以在引擎初始化成功后动态设置,当前只支持更新thresh
     *
     * @param envJson setJson
     *                须在start启动成功后可以调用
     */
    public void setDynamicParam(JSONObject envJson) {
        Log.i(TAG, "setDynamicParam:" + envJson);
        if (mWakeupProcessor != null) {
            mWakeupProcessor.set(envJson.toString());
        }
    }


    /**
     * 动态调整参数，具体请参照 demo
     * 仅支持intent中设置的唤醒词的阈值修改
     *
     * @param wakeupWord 唤醒词，参数示例：["ni hao xiao chi","xiao bu xiao bu"]
     * @param threshold  唤醒词对应的阈值，参数示例：[0.2, 0.3]
     * @param majors     是否主唤醒词，主唤醒词为1，副唤醒词为0，如 [1,0]
     *                   设置主唤醒词后，内核会对唤醒词部分音频进行回溯
     * @throws IllegalPinyinException {@link IllegalPinyinException} 非法拼音异常
     */
    public void updateWakeupThreshold(String[] wakeupWord, float[] threshold, int[] majors) throws IllegalPinyinException {
        String wakeupParams = DynamicParamUtils.getWakeupWordsParams(wakeupWord, threshold, majors, true);
        Log.d(TAG, "updateWakeupThreshold :" + wakeupParams + "  mDmaspProcessor " + mWakeupProcessor);
        if (mWakeupProcessor != null) {
            mWakeupProcessor.set(wakeupParams);
        }
    }

    /**
     * 设置唤醒词
     * 此功能先内部先执行stop，再执行start，调用者无需再执行start
     *
     * @param wakeupWord 唤醒词，参数示例：["ni hao xiao chi","xiao bu xiao bu"]
     * @param threshold  唤醒词对应的阈值，参数示例：[0.2, 0.3]
     * @param majors     是否主唤醒词，主唤醒词为1，副唤醒词为0，如 [1,0]
     *                   设置主唤醒词后，内核会对唤醒词部分音频进行回溯
     * @throws IllegalPinyinException {@link IllegalPinyinException} 非法拼音异常
     * @deprecated {@link AIWakeupIntent#setWakeupWord(String[], float[])}
     */
    public void setWakeupWords(String[] wakeupWord, float[] threshold, int[] majors) throws IllegalPinyinException {
        Log.i(TAG, "setWakeupWords:" + wakeupWord);
        String wakeupParams = DynamicParamUtils.getWakeupWordsParams(wakeupWord, threshold, majors, true);
        stop();
        if (mParam != null) {
            mParam.setMajors(majors);
            mParam.setWords(wakeupWord);

            if (threshold != null && threshold.length > 0) {
                String[] thresholdStr = new String[threshold.length];
                for (int i = 0; i < threshold.length; i++) {
                    thresholdStr[i] = String.format(Locale.ENGLISH, "%.3f", threshold[i]);
                }
                mParam.setThreshold(thresholdStr);
            } else {
                mParam.setThreshold(null);
            }
        }
        Log.d(TAG, "setWakeupWords :" + wakeupParams + "  mDmaspProcessor " + mWakeupProcessor);
        if (mWakeupProcessor != null && mParam != null) {
            mWakeupProcessor.start(mParam);
        }
    }


    /**
     * 自行feed音频数据，不使用内部录音机时可用
     *
     * @param data 音频数据
     * @param size 音频数据大小
     * @see AIWakeupIntent#setUseCustomFeed(boolean)
     */
    public void feedData(byte[] data, int size) {
        if (mParam != null && !mParam.isUseCustomFeed())
            return;

        boolean isAddExtraAudio = mParam != null && !mParam.inputContinuousAudio() && mParam.isAddExtraAudioWhenFeedNotContinuousAudio();
        if (isAddExtraAudio) {
            int accessionalSize = getAccessionalData().length;
            byte[] revisedData = new byte[data.length + accessionalSize];
            System.arraycopy(data, 0, revisedData, 0, data.length);
            System.arraycopy(getAccessionalData(), 0, revisedData, data.length, accessionalSize);

            if (mWakeupProcessor != null) {
                Log.i(TAG, "revisedData: " + revisedData.length);
                mWakeupProcessor.feedData(revisedData, revisedData.length);
            }
        } else {
            if (mWakeupProcessor != null) {
                mWakeupProcessor.feedData(data, size);
            }
        }
    }

    /**
     * 开启唤醒，如果使用内部录音机的话一并开启
     *
     * @param aiWakeupIntent 配置参数
     */
    public void start(AIWakeupIntent aiWakeupIntent) {
        super.start();
        parseIntent(aiWakeupIntent);
        if (mWakeupProcessor != null) {
            mWakeupProcessor.start(mParam);
        }
    }

    private void parseIntent(AIWakeupIntent aiWakeupIntent) {
        if (aiWakeupIntent == null) {
            Log.d(TAG, "AIWakeupIntent is null !");
            return;
        }
        super.parseIntent(aiWakeupIntent, mParam);
        Log.d(TAG, "AIWakeupIntent " + aiWakeupIntent);

        mParam.setUseCustomFeed(aiWakeupIntent.isUseCustomFeed());
        mParam.setUseOneShotFunction(aiWakeupIntent.isUseOneShot());
        mParam.setContinuousAudio(aiWakeupIntent.isInputContinuousAudio());
        mParam.setAddExtraAudioWhenFeedNotContinuousAudio(aiWakeupIntent.isAddExtraAudioWhenFeedNotContinuousAudio());
        mParam.setWords(aiWakeupIntent.getPinyin());
        mParam.setVad(aiWakeupIntent.isVadEnable() ? 1 : 0);

        if (aiWakeupIntent.getThreshold() != null && aiWakeupIntent.getThreshold().length > 0) {
            String[] threshold = new String[aiWakeupIntent.getThreshold().length];
            for (int i = 0; i < aiWakeupIntent.getThreshold().length; i++) {
                threshold[i] = String.format(Locale.ENGLISH, "%.3f", aiWakeupIntent.getThreshold()[i]);
            }
            mParam.setThreshold(threshold);
        } else {
            mParam.setThreshold(null);
        }

        float[] threshHigh = aiWakeupIntent.getThreshHigh();
        if (threshHigh != null && threshHigh.length > 0) {
            String[] thresholdHigh = new String[threshHigh.length];
            for (int i = 0; i < threshHigh.length; i++) {
                thresholdHigh[i] = String.format(Locale.ENGLISH, "%.3f", threshHigh[i]);
            }
            mParam.setThreshHigh(thresholdHigh);
        } else {
            mParam.setThreshHigh(null);
        }

        float[] threshLow = aiWakeupIntent.getThreshLow();
        if (threshLow != null && threshLow.length > 0) {
            String[] thresholdLow = new String[threshLow.length];
            for (int i = 0; i < threshLow.length; i++) {
                thresholdLow[i] = String.format(Locale.ENGLISH, "%.3f", threshLow[i]);
            }
            mParam.setThreshLow(thresholdLow);
        } else {
            mParam.setThreshLow(null);
        }

        mParam.setCustom(aiWakeupIntent.getCustomNet());
        mParam.setNet(aiWakeupIntent.getEnableNet());
        mParam.setDchecks(aiWakeupIntent.getDcheck());
        mParam.setDumpAudioPath(aiWakeupIntent.getDumpWakeupAudioPath());
        mParam.setDumpTime(aiWakeupIntent.getDumpWakeupTime());
    }

    /**
     * 关闭唤醒，如果使用内部录音机的话一并关闭
     */
    public void stop() {
        super.stop();
        if (mWakeupProcessor != null) {
            mWakeupProcessor.stop();
        }
    }

    /**
     * 强制请求唤醒结果，即使没有唤醒也会给出唤醒词为null的结果
     */
    public void forceRequestWakeupResult() {
        if (mWakeupProcessor != null) {
            mWakeupProcessor.forceRequestWakeupResult();
        }
    }

    /**
     * 销毁唤醒内核和录音机
     */
    public void destroy() {
        super.destroy();
        if (mWakeupProcessor != null) {
            mWakeupProcessor.release();
        }
        if (mSpeechListenerImpl != null) {
            mSpeechListenerImpl.setListener(null);
        }
        if (mParam != null) {
            mParam = null;
        }
        if (mConfig != null) {
            mConfig = null;
        }
    }

    /**
     * The adapter for convert SpeechListener to AILocalWakeupListener.
     */
    private class SpeechListenerImpl extends SpeechListener {
        AIWakeupListener mListener;

        public SpeechListenerImpl(AIWakeupListener listener) {
            mListener = listener;
        }

        public void setListener(AIWakeupListener listener) {
            this.mListener = listener;
        }

        @Override
        public void onError(AIError error) {
            if (mListener != null) {
                mListener.onError(error);
            }
        }

        @Override
        public void onInit(int status) {
            if (mListener != null) {
                mListener.onInit(status);
            }
        }

        @Override
        public void onResults(AIResult result) {
            if (result.getResultType() == AIConstant.AIENGINE_MESSAGE_TYPE_JSON) {
                JSONObject obj;
                double confidence;
                String wakeupWord;
                try {
                    obj = new JSONObject(result.getResultObject().toString());
                    String recordId = result.getRecordId();
                    if (!obj.isNull("confidence") && !obj.isNull("wakeupWord") && !obj.isNull("status")) {
                        int status = obj.optInt("status");
                        confidence = obj.getDouble("confidence");
                        wakeupWord = obj.getString("wakeupWord");
                        if (mListener != null) {
                            if (status == 4) {//pre wakeup happens
                                mListener.onPreWakeup(recordId, confidence, wakeupWord);
                            } else if (status == 1 || status == 0) {//real wakeup happens
                                mListener.onWakeup(recordId, confidence, wakeupWord);
                            }
                        }
                    }
                } catch (JSONException e) {
                    e.printStackTrace();
                }
            }
        }

        @Override
        public void onBeginningOfSpeech() {
            //nothing here
        }

        @Override
        public void onRawDataReceived(byte[] buffer, int size) {
            if (mListener != null) {
                mListener.onRawDataReceived(buffer, size);
            }
        }

        @Override
        public void onResultDataReceived(byte[] buffer, int size, int wakeupType) {
            if (mListener != null) {
                mListener.onResultDataReceived(buffer, size);
            }
        }

        @Override
        public void onVprintCutDataReceived(int dataType, byte[] data, int size) {
            if (mListener != null) {
                try {
                    mListener.onVprintCutDataReceived(dataType, data, size);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }

        @Override
        public void onEndOfSpeech() {
            //nothing here
        }


        @Override
        public void onReadyForSpeech() {
            Log.d(TAG, "onReadyForSpeech");
            if (mListener != null) {
                mListener.onReadyForSpeech();
            }
        }

        @Override
        public void onRmsChanged(float rmsdB) {
            //nothing here
        }


        /**
         * @deprecated 废弃，勿用
         */
        @Override
        @Deprecated
        public void onRecorderStopped() {
            //nothing here
        }

        @Override
        public void onEvent(int eventType, Map params) {
            //nothing here
        }

        @Override
        public void onOneShot(String word, OneshotCache<byte[]> buffer) {
            super.onOneShot(word, buffer);
            if (mListener != null) {
                mListener.onOneshot(word, buffer);
            }
        }

        @Override
        public void onNotOneShot() {
            //nothing here
            Log.d(TAG, "onNotOneShot: ");
        }

        @Override
        public void onNotOneShot(String word) {
            if (mListener != null) {
                mListener.onNotOneshot(word);
            }
        }

        @Override
        public void onRawWakeupDataReceived(byte[] wkpData, int length) {
            Log.d(TAG, "onRawWakeupDataReceived");
            if (mListener != null) {
                mListener.onRawWakeupDataReceived(wkpData, length);
            }
        }
    }
}
