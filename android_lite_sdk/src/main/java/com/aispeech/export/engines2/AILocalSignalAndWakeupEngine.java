package com.aispeech.export.engines2;

import android.text.TextUtils;

import com.aispeech.AIError;
import com.aispeech.AIResult;
import com.aispeech.DUILiteConfig;
import com.aispeech.base.IFespxEngine;
import com.aispeech.common.AIConstant;
import com.aispeech.common.JNIFlag;
import com.aispeech.common.Log;
import com.aispeech.common.Util;
import com.aispeech.export.config.AILocalSignalAndWakeupConfig;
import com.aispeech.export.config.WakeupWord;
import com.aispeech.export.intent.AILocalSignalAndWakeupIntent;
import com.aispeech.export.listeners.AILocalSignalAndWakeupListener;
import com.aispeech.kernel.Fespa;
import com.aispeech.kernel.Fespd;
import com.aispeech.kernel.Fespl;
import com.aispeech.kernel.NearFespx;
import com.aispeech.kernel.Sspe;
import com.aispeech.kernel.fespCar;
import com.aispeech.lite.AISpeech;
import com.aispeech.lite.base.BaseEngine;
import com.aispeech.lite.config.LocalSignalProcessingConfig;
import com.aispeech.lite.fespx.FespxProcessor;
import com.aispeech.lite.param.SignalProcessingParams;
import com.aispeech.lite.speech.SpeechListener;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.io.File;
import java.lang.reflect.Array;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.Map;

/**
 * 多麦唤醒
 */
public class AILocalSignalAndWakeupEngine extends BaseEngine implements IFespxEngine {
    private static final String TAG = "AILSAWEngine";
    private static final String
    private FespxProcessor mFespxProcessor;
    private LocalSignalProcessingConfig signalConfig;
    private SignalProcessingParams mParam;
    private SpeechListenerImpl mSpeechListener;
    private volatile byte[] accessionalData;
    private Map<String, WakeupWord> mapWakeupWord = new HashMap<>();

    private AILocalSignalAndWakeupEngine() {
        signalConfig = new LocalSignalProcessingConfig();
        mParam = new SignalProcessingParams();
        mSpeechListener = new SpeechListenerImpl(null);
    }

    @Override
    public String getTag() {
        return "local_saw";
    }

    /**
     * 创建前端信号处理引擎对象
     *
     * @return AILocalSignalAndWakeupEngine  返回实例对象，可支持多实例
     */
    public static AILocalSignalAndWakeupEngine createInstance() {
        return new AILocalSignalAndWakeupEngine();
    }

    private byte[] getAccessionalData() {
        if (accessionalData == null)
            synchronized (this) {
                if (accessionalData == null)
                    accessionalData = Util.hexToByte(ACCESSIONAL_HEX);
            }
        return accessionalData;
    }

    private boolean checkLibValid() {
        if (signalConfig != null && signalConfig.isSspe())
            return Sspe.isSoValid();
        int micType = signalConfig != null && signalConfig.getMicType() >= 0 ? signalConfig.getMicType() : AISpeech.getRecoderType();
        if (signalConfig != null && signalConfig.getNearWakeupConfig() != null) {
            boolean nearFespxSo = NearFespx.isFespxSoValid();
            if (!nearFespxSo) {
                return false;
            }
        }

        switch (micType) {
            case DUILiteConfig.TYPE_COMMON_LINE4:
            case DUILiteConfig.TYPE_TINYCAP_LINE4:
            case DUILiteConfig.TYPE_TINYCAP_LINE6:
                return Fespl.isFespxSoValid();
            case DUILiteConfig.TYPE_COMMON_CIRCLE6:
            case DUILiteConfig.TYPE_COMMON_CIRCLE4:
            case DUILiteConfig.TYPE_TINYCAP_CIRCLE4:
            case DUILiteConfig.TYPE_TINYCAP_CIRCLE6:
                return Fespa.isFespxSoValid();
            case DUILiteConfig.TYPE_COMMON_FESPCAR:
            case DUILiteConfig.TYPE_COMMON_FESPCAR4:
                return fespCar.isFespxSoValid();
            case DUILiteConfig.TYPE_COMMON_DUAL:
            case DUILiteConfig.TYPE_TINYCAP_DUAL:
                return Fespd.isFespxSoValid();
            default:
                return Sspe.isSoValid();
        }
    }

    @Override
    public FespxProcessor getFespxProcessor() {
        return this.mFespxProcessor;
    }

    public void init(AILocalSignalAndWakeupConfig config, AILocalSignalAndWakeupListener listener) {
        super.init();
        parseConfig(config);
        JNIFlag.isLoadCarSspe = false;
        if (!checkLibValid() && listener != null) {
            listener.onInit(AIConstant.OPT_FAILED);
            listener.onError(new AIError(AIError.ERR_SO_INVALID, AIError.ERR_DESCRIPTION_SO_INVALID));
            Log.e(TAG, "so动态库加载失败 !");
            return;
        }
        mSpeechListener.setListener(listener);
        if (mFespxProcessor == null)
            mFespxProcessor = new FespxProcessor();
        mFespxProcessor.init(mSpeechListener, signalConfig);
        mBaseProcessor = mFespxProcessor;
    }

    private void parseConfig(AILocalSignalAndWakeupConfig config) {
        if (config == null) {
            Log.e(TAG, "AILocalSignalAndWakeupConfig is null !");
            return;
        }
        Log.d(TAG, "AILocalSignalAndWakeupConfig " + config);
        signalConfig.setUseSspe(config.isSspe());
        signalConfig.setRollBack(config.getRollBackTime());
        signalConfig.setThreshs(config.getThreshold());
        signalConfig.setThreshs2(config.getLowThreshold());
        signalConfig.setCcThreshs(config.getCcThreshold());
        signalConfig.setEnv(config.getEnv());
        signalConfig.setWakupWords(config.getWakeupWord());
        signalConfig.setSubwordWakeup(config.getSubwordWakeup());

        float[] threshHigh = config.getThreshHigh();
        if (threshHigh != null && threshHigh.length > 0) {
            String[] thresholdHigh = new String[threshHigh.length];
            for (int i = 0; i < threshHigh.length; i++) {
                thresholdHigh[i] = String.format(Locale.ENGLISH, "%.3f", threshHigh[i]);
            }
            signalConfig.setThreshHigh(thresholdHigh);
        } else {
            signalConfig.setThreshHigh(null);
        }

        float[] threshLow = config.getThreshLow();
        if (threshLow != null && threshLow.length > 0) {
            String[] thresholdLow = new String[threshLow.length];
            for (int i = 0; i < threshLow.length; i++) {
                thresholdLow[i] = String.format(Locale.ENGLISH, "%.3f", threshLow[i]);
            }
            signalConfig.setThreshLow(thresholdLow);
        } else {
            signalConfig.setThreshLow(null);
        }

        signalConfig.setCustom(config.getCustomNet());
        signalConfig.setNet(config.getEnableNet());
        signalConfig.setMajors(config.getMajors());
        signalConfig.setDchecks(config.getDcheck());
        signalConfig.setVad(config.isVad());
        signalConfig.setMaxMessageQueueSize(config.getMaxMessageQueueSize());
        parseConfigWakeupword(config.getWakeupWord(), config.getThreshold(), config.getLowThreshold(), config.getMajors(), config.getDcheck());
        signalConfig.setStateFrame(config.getStateFrame());
        signalConfig.setRightMarginFrame(config.getRightMarginFrame());
        signalConfig.setCnWakeupWord(config.getCnWakeupWord());
        signalConfig.setHighThreshold(config.getHighThreshold());
        signalConfig.setCloudWakeupCheckTimeout(config.getCloudWakeupCheckTimeout());
        signalConfig.setPreUploadRollbackTime(config.getPreUploadRollbackTime());

        //接口callback注册标记
        signalConfig.setImplMultiBfCk(config.isImplMultiBfCk());
        signalConfig.setImplWakeupCk(config.isImplWakeupCk());
        signalConfig.setImplInputCk(config.isImplInputCk());
        signalConfig.setImplOutputCk(config.isImplOutputCk());
        signalConfig.setImplEchoCk(config.isImplEchoCk());
        signalConfig.setImplEchoVoipCk(config.isImplEchoVoipCk());
        signalConfig.setImplAgcCk(config.isImplAgcCk());
        signalConfig.setImplBfCk(config.isImplBfCk());
        signalConfig.setImplDoaCk(config.isImplDoaCk());
        signalConfig.setImplSevcNoiseCk(config.isImplSevcNoiseCk());
        signalConfig.setImplVprintCutCk(config.isImplVprintCutCk());
        signalConfig.setImplSevcDoaCk(config.isImplSevcDoaCk());
        signalConfig.setImplVadCk(config.isImplVadCk());

        // resource in assets
        final List<String> resourceInAssetsList = new ArrayList<>();

        // wakeupResource
        final String wakeupResource = config.getWakeupResource();
        parseWakeupResConfig(resourceInAssetsList, wakeupResource);

        // sspeResource
        final String sspeResource = config.getSspeResource();
        if (TextUtils.isEmpty(sspeResource)) {
            Log.e(TAG, "sspeResource not found !!");
            signalConfig.setSspeBinPath(null);
        } else if (sspeResource.startsWith("/")) {
            signalConfig.setSspeBinPath(sspeResource);
        } else {
            resourceInAssetsList.add(sspeResource);
            signalConfig.setSspeBinPath(Util.getResourceDir(signalConfig.getContext()) + File.separator + sspeResource);
        }

        if (!config.isSspe()) {

            // beamformingResource
            final String beamformingResource = config.getBeamformingResource();
            if (TextUtils.isEmpty(beamformingResource)) {
                Log.e(TAG, "beamformingResource not found !!");
            } else if (beamformingResource.startsWith("/")) {
                signalConfig.setBeamformingBinPath(beamformingResource);
            } else {
                resourceInAssetsList.add(beamformingResource);
                signalConfig.setBeamformingBinPath(Util.getResourceDir(signalConfig.getContext()) + File.separator + beamformingResource);
            }

            // aecResource
            final String aecResource = config.getAecResource();
            if (TextUtils.isEmpty(aecResource)) {
                // 不设置 AEC 资源即不进行 AEC 处理
                Log.w(TAG, "aecResource not found !!");
                Log.w(TAG, "setAecBinPath OFF");
                signalConfig.setAecBinPath("OFF");
            } else if (aecResource.startsWith("/")) {
                signalConfig.setAecBinPath(aecResource);
            } else {
                resourceInAssetsList.add(aecResource);
                signalConfig.setAecBinPath(Util.getResourceDir(signalConfig.getContext()) + File.separator + aecResource);
            }

        }

        signalConfig.setMicType(config.getMicType());
        signalConfig.setEchoChannelNum(config.getEchoChannelNum());

        parseMdsResConfig(config, resourceInAssetsList);
        signalConfig.setNearWakeupConfig(config.getNearWakeupConfig());

        signalConfig.setAssetsResNames(resourceInAssetsList.toArray(new String[resourceInAssetsList.size()]));
    }

    private void parseWakeupResConfig(List<String> resourceInAssetsList, String wakeupResource) {
        if (TextUtils.isEmpty(wakeupResource)) {
            Log.e(TAG, "wakeupResource not found !!");
            Log.w(TAG, "setWakupBinPath OFF");
            signalConfig.setWakupBinPath("OFF");
        } else if (wakeupResource.startsWith("/")) {
            signalConfig.setWakupBinPath(wakeupResource);
        } else {
            resourceInAssetsList.add(wakeupResource);
            signalConfig.setWakupBinPath(Util.getResourceDir(signalConfig.getContext()) + File.separator + wakeupResource);
        }
    }

    private void parseMdsResConfig(AILocalSignalAndWakeupConfig config, List<String> resourceInAssetsList) {
        if (config.getNearWakeupConfig() != null) {
            String mdsResource = config.getNearWakeupConfig().getMdsResource();
            if (TextUtils.isEmpty(mdsResource)) {
                Log.w(TAG, "mdsResource not found !!");
            } else if (mdsResource.startsWith("/")) {
                config.getNearWakeupConfig().setMdsResource(mdsResource);
            } else {
                resourceInAssetsList.add(mdsResource);
                config.getNearWakeupConfig().setMdsResource(Util.getResourceDir(signalConfig.getContext()) + File.separator + mdsResource);
            }
        }
    }

    private void parseIntent(AILocalSignalAndWakeupIntent aiLocalSignalAndWakeupIntent) {
        if (aiLocalSignalAndWakeupIntent == null) {
            Log.e(TAG, "AILocalSignalAndWakeupIntent is null !");
            return;
        }
        super.parseIntent(aiLocalSignalAndWakeupIntent, mParam);
        Log.d(TAG, "AILocalSignalAndWakeupIntent " + aiLocalSignalAndWakeupIntent);
        mParam.setSaveAudioFilePath(aiLocalSignalAndWakeupIntent.getSaveAudioFilePath());
        mParam.setUseCustomFeed(aiLocalSignalAndWakeupIntent.isUseCustomFeed());
        mParam.setDumpAudioPath(aiLocalSignalAndWakeupIntent.getDumpWakeupAudioPath());
        mParam.setDumpTime(aiLocalSignalAndWakeupIntent.getDumpWakeupTime());
        mParam.setInputContinuousAudio(aiLocalSignalAndWakeupIntent.isInputContinuousAudio());
        mParam.setAddExtraAudioWhenFeedNotContinuousAudio(aiLocalSignalAndWakeupIntent.isAddExtraAudioWhenFeedNotContinuousAudio());
        mParam.setAutoSetDriveMode(aiLocalSignalAndWakeupIntent.isAutoSetDriveMode());
    }

    /**
     * 启动信号处理模块和唤醒引擎
     *
     * @param aiLocalSignalAndWakeupIntent 前端信号处理参数
     * @see AILocalSignalAndWakeupIntent
     */
    public void start(AILocalSignalAndWakeupIntent aiLocalSignalAndWakeupIntent) {
        super.start();
        parseIntent(aiLocalSignalAndWakeupIntent);
        if (mFespxProcessor != null) {
            mFespxProcessor.start(mParam);
        }
    }

    /**
     * 获取{@link AILocalSignalAndWakeupListener#onVprintCutDataReceived(int, byte[], int)}返回的音频通道
     * 用于设置给{@link com.aispeech.lite.vprint.VprintIntent#setAecChannelNum(int)}
     * 和{@link com.aispeech.lite.vprint.VprintIntent#setBfChannelNum(int)}
     *
     * @param param {@link AIConstant#KEY_FESPX_AEC_CHANNEL} 和 {@link AIConstant#KEY_FESPX_BF_CHANNEL}
     * @return aecChannelNum或bfChannelNum
     * 须在引擎初始化{@link AILocalSignalAndWakeupListener#onInit(int)}成功后才可以获取,若返回值为-1，则表示引擎未初始化
     */
    public int getValueOf(String param) {
        if (mFespxProcessor != null) {
            return mFespxProcessor.getValueOf(param);
        }
        return -1;
    }

    /**
     * 动态调整参数
     * <pre>{@code
     *  mEngine.setDynamicParam(new String[]{"ni hao xiao le"}, new float[]{0.45f}, new int[]{1})
     * }</pre>
     *
     * @param wakeupWord 唤醒词，参数示例：["ni hao xiao chi","xiao bu xiao bu"]
     * @param threshold  唤醒词对应的阈值，参数示例：[0.2, 0.3]
     * @param majors     是否主唤醒词，主唤醒词为1，副唤醒词为0，如 [1,0]
     */
    public void setDynamicParam(String[] wakeupWord, float[] threshold, int[] majors) {
        setDynamicParam(wakeupWord, threshold, null, majors);
    }

    /**
     * 动态调整参数
     * <pre>{@code
     *  mEngine.setDynamicParam(new String[]{"ni hao xiao le"}, new float[]{0.45f},new float[]{0.32f}, new int[]{1})
     * }</pre>
     *
     * @param wakeupWord 唤醒词，参数示例：["ni hao xiao chi","xiao bu xiao bu"]
     * @param threshold  唤醒词对应的阈值，参数示例：[0.2, 0.3]
     * @param threshold2 设置大音量场景下的唤醒阈值
     * @param majors     是否主唤醒词，主唤醒词为1，副唤醒词为0，如 [1,0]
     */
    public void setDynamicParam(String[] wakeupWord, float[] threshold, float[] threshold2, int[] majors) {
        setDynamicParam(wakeupWord, threshold, threshold2, majors, false);
    }

    /**
     * 动态设置参数
     * <pre>{@code
     *  mEngine.setDynamicParam(new String[]{"ni hao xiao le"}, new float[]{0.45f},new float[]{0.32f}, new int[]{1}, false)
     * }</pre>
     *
     * @param wakeupWord 唤醒词，参数示例：["ni hao xiao chi","xiao bu xiao bu"]
     * @param threshold  唤醒词对应的阈值，参数示例：[0.2, 0.3]
     * @param threshold2 设置大音量场景下的唤醒阈值
     * @param majors     是否主唤醒词，主唤醒词为1，副唤醒词为0，如 [1,0]
     * @param vad        内核是否使用vad功能
     */
    public void setDynamicParam(String[] wakeupWord, float[] threshold, float[] threshold2, int[] majors, boolean vad) {
        if (wakeupWord == null || wakeupWord.length == 0 || threshold == null || threshold.length == 0
                || majors == null || majors.length == 0)
            return;
        if (wakeupWord.length != threshold.length || wakeupWord.length != majors.length)
            return;
        StringBuilder sb = new StringBuilder();

        sb.append("words=");
        for (int i = 0; i < wakeupWord.length; i++) {
            sb.append(wakeupWord[i]);
            if (i < wakeupWord.length - 1)
                sb.append(",");
        }

        appendsThreshs(threshold, threshold2, sb);

        sb.append(";major=");
        for (int i = 0; i < majors.length; i++) {
            sb.append(majors[i]);
            if (i < majors.length - 1)
                sb.append(",");
        }
        sb.append(";");

        sb.append("vad=").append(vad ? "1" : "0").append(";");

        Map<String, Object> dynamicParam = new HashMap<>();
        // 动态设置唤醒env
        dynamicParam.put("env", sb.toString());
        setDynamicParam(dynamicParam);
    }

    private void appendsThreshs(float[] threshold, float[] threshold2, StringBuilder sb) {
        sb.append(";thresh=");
        for (int i = 0; i < threshold.length; i++) {
            sb.append(String.format(Locale.ENGLISH, "%.3f", threshold[i]));
            if (i < threshold.length - 1)
                sb.append(",");
        }

        if (threshold2 != null && threshold2.length > 0) {
            sb.append(";thresh2=");
            for (int i = 0; i < threshold2.length; i++) {
                sb.append(String.format(Locale.ENGLISH, "%.3f", threshold2[i]));
                if (i < threshold2.length - 1)
                    sb.append(",");
            }
        }
    }

    /**
     * 动态调整参数，可以用来设置唤醒词，阈值等
     * <pre>{@code
     *  Map envMap = new HashMap();
     *  envMap.put("words", new String[]{"ni hao xiao le"});
     *  envMap.put("thresh", new float[]{0.45f});
     *  mEngine.setDynamicParamEnv(envMap);
     * }</pre>
     * 区别于{@link AILocalSignalAndWakeupEngine#setDynamicParamEnv(Map)}  此方法仅可用于设置唤醒词和唤醒词阈值
     *
     * @param dynamicParam env 里的参数，key可以是 words thresh thresh2 major等, value 类型可以是 基础类型、字符串、数组、列表
     * @since 2.11.1
     */
    public void setDynamicParamEnv(Map<String, ?> dynamicParam) {
        if (dynamicParam == null || dynamicParam.isEmpty()) {
            Log.i(TAG, "setDynamicParamEnv: dynamicParam isEmpty ");
            return;
        }
        Iterator<String> iter = dynamicParam.keySet().iterator();
        StringBuilder envSb = new StringBuilder();
        while (iter.hasNext()) {
            String key = iter.next();
            Object obj = dynamicParam.get(key);
            String value;
            if (obj == null) {
                continue;
            } else if (obj instanceof Iterable) {
                StringBuilder sb = new StringBuilder();
                Iterator<Object> iterator = ((Iterable) obj).iterator();
                while (iterator.hasNext()) {
                    Object o = iterator.next();
                    sb.append(o);
                    if (iterator.hasNext())
                        sb.append(",");
                }
                value = sb.toString();
            } else if (obj.getClass().isArray()) {
                value = transferTypeArray(obj);
            } else {
                value = String.valueOf(obj);
            }
            envSb.append(key).append("=").append(value).append(";");
        }

        Map<String, Object> envMap = new HashMap<>();
        // 动态设置唤醒env
        envMap.put("env", envSb.toString());
        setDynamicParam(envMap);
    }

    private String transferTypeArray(Object obj) {
        String value;
        StringBuilder sb = new StringBuilder();
        int length = Array.getLength(obj);
        for (int i = 0; i < length; i++) {
            sb.append(Array.get(obj, i));
            if (i < length - 1)
                sb.append(",");
        }
        value = sb.toString();
        return value;
    }

    /**
     * 动态设置唤醒参数，可以在引擎初始化成功后动态设置
     * <pre>{@code
     *  Map<String, Object> dynamicParam = new HashMap<>();
     *  dynamicParam.put("env", "words=ni hao xiao le;thresh=0.45;major=1;");
     *  // maxVolumeState 用于设置大音量状态，需配置AEC资源。启用大音量检测功能时，在每次 feed 之前调用，0 表示非大音量，1 表示大音量
     *  dynamicParam.put("maxVolumeState", 1);
     *  //动态设置开关，1为开，0为关
     *  dynamicParam.put("wakeupSwitch", 0);
     *  dynamicParam.put("doa", 90);
     *  mEngine.setDynamicParam(dynamicParam);
     * }</pre>
     * 区别于{@link AILocalSignalAndWakeupEngine#setDynamicParam(Map)} 此方法可用于设置唤醒词和唤醒词阈值以外，还可以设置其他属性，如唤醒角度，环形开关，大音量等属性
     *
     * @param dynamicParam 动态参数, Map 类型，key 为 String 类型，可以是env ,maxVolumeState,wakeupSwitch,doa   value 类型可以是 基础类型、字符串、数组、列表
     */
    public void setDynamicParam(Map<String, ?> dynamicParam) {
        if (dynamicParam == null || dynamicParam.isEmpty()) {
            Log.i(TAG, "setDynamicParam: dynamicParam isEmpty ");
            return;
        }
        parseDynamicParamEnv(dynamicParam);

        JSONObject setJson = new JSONObject();
        Iterator<String> iter = dynamicParam.keySet().iterator();
        while (iter.hasNext()) {
            String key = iter.next();
            Object value = dynamicParam.get(key);
            try {
                if (value != null) {
                    if (value instanceof Iterable) {
                        transferTypeItera(setJson, key, (Iterable) value);
                    } else if (value.getClass().isArray()) {
                        tranferTypeArray(setJson, key, value);
                    } else {
                        setJson.put(key, value);
                    }
                }
            } catch (JSONException e) {
                e.printStackTrace();
                Log.e(TAG, "setDynamicParam key：" + key + " " + e);
            }
        }

        final String setString = setJson.toString();
        if (mFespxProcessor != null) {
            Log.i(TAG, "setDynamicParam: " + setString);
            mFespxProcessor.set(setString);
        }
    }

    private void transferTypeItera(JSONObject setJson, String key, Iterable<Object> value) throws JSONException {
        JSONArray jsonArray = new JSONArray();
        for (Object o : value) {
            jsonArray.put(o);
        }
        setJson.put(key, jsonArray);
    }

    private void tranferTypeArray(JSONObject setJson, String key, Object value) throws JSONException {
        JSONArray jsonArray = new JSONArray();
        int length = Array.getLength(value);
        for (int i = 0; i < length; i++) {
            jsonArray.put(Array.get(value, i));
        }
        setJson.put(key, jsonArray);
    }

    public void setDynamicParam(String json) {
        if (mFespxProcessor != null) {
            Log.i(TAG, "setDynamicParam: " + json);
            mFespxProcessor.set(json);
        }
    }

    /**
     * 获取 驾驶模式，只有车载双麦模块有这个功能
     *
     * @return 0为定位模式, 按照声源定位;1为主驾模式;2为副驾模式;3为全车模式，-1 错误，没有获取到
     */
    public synchronized int getDriveMode() {
        return mFespxProcessor != null ? mFespxProcessor.getDriveMode() : -1;
    }

    /**
     * 获取vprintcut回调输出tlv数据包长度，资源需要带声纹。
     * 每次输出时该长度固定，输入声纹时也需要保持该长度
     *
     * @return vprintcut回调 tlv数据包长度, 小于0 表示获取失败
     */
    public int getVpCallbackLength() {
        return mFespxProcessor != null ? mFespxProcessor.getFespx("vpCbLen") : -1;
    }

    /**
     * 停止信号处理模块和唤醒引擎
     * 该方法会停止接收录音数据和停止信号处理，唤醒，程序退出时可以调用
     */
    public void stop() {
        super.stop();
        if (mFespxProcessor != null) {
            mFespxProcessor.stop();
        }
    }

    /**
     * 强制请求唤醒结果，即使没有唤醒也会给出唤醒词为null的结果
     */
    public void forceRequestWakeupResult() {
        if (mFespxProcessor != null) {
            mFespxProcessor.forceRequestWakeupResult();
        }
    }

    /**
     * 销毁信号处理模块和唤醒引擎
     * 该方法会停止录音机和销毁录音机
     */
    public synchronized void destroy() {
        super.destroy();
        if (mFespxProcessor != null) {
            mFespxProcessor.release();
            mFespxProcessor = null;
        }
        if (mSpeechListener != null) {
            mSpeechListener.setListener(null);
            mSpeechListener = null;
        }
    }

    /**
     * 传入数据,在不使用SDK录音机时调用
     *
     * @param data 音频数据流
     * @param size 数据大小
     * @see com.aispeech.export.intent.AILocalSignalAndWakeupIntent#setUseCustomFeed(boolean)
     */
    public void feedData(byte[] data, int size) {
        if (mParam != null && !mParam.isUseCustomFeed())
            return;

        boolean isAddExtraAudio = mParam != null && !mParam.isInputContinuousAudio() && mParam.isAddExtraAudioWhenFeedNotContinuousAudio();
        int micType = signalConfig != null && signalConfig.getMicType() >= 0 ? signalConfig.getMicType() : AISpeech.getRecoderType();
        if (isAddExtraAudio && micType == DUILiteConfig.TYPE_COMMON_DUAL) {
            int accessionalSize = getAccessionalData().length;
            byte[] revisedData = new byte[data.length + accessionalSize];
            System.arraycopy(data, 0, revisedData, 0, data.length);
            System.arraycopy(getAccessionalData(), 0, revisedData, data.length, accessionalSize);

            if (mFespxProcessor != null) {
                Log.i(TAG, "revisedData: " + revisedData.length);
                mFespxProcessor.feedData(revisedData, revisedData.length);
            }
        } else {
            if (mFespxProcessor != null) {
                mFespxProcessor.feedData(data, size);
            }
        }
    }

    public synchronized void addOrUpdateWakeupword(List<WakeupWord> wakeupWords) {
        if (wakeupWords == null || wakeupWords.isEmpty())
            return;
        addOrUpdateWakeupword(wakeupWords.toArray(new WakeupWord[wakeupWords.size()]));
    }

    /**
     * 动态更新唤醒词
     * <pre>{@code
     * mEngine.addOrUpdateWakeupword(new WakeupWord("xiao bu xiao bu", 0.49f, 0.21f, 0, 0),
     *                         new WakeupWord("xiao la hao ke", 0.38f, 0, 1, 0));}</pre>
     *
     * @param wakeupWord 增加或者更改的唤醒词
     */
    public synchronized void addOrUpdateWakeupword(WakeupWord... wakeupWord) {
        if (wakeupWord == null || wakeupWord.length == 0)
            return;
        for (WakeupWord w : wakeupWord) {
            if (w.isValid())
                mapWakeupWord.put(w.getWakeupWord(), w);
        }
        setDynamicWord();
    }

    public synchronized void removeWakeupword(List<WakeupWord> wakeupWords) {
        if (wakeupWords == null || wakeupWords.isEmpty())
            return;
        removeWakeupword(wakeupWords.toArray(new WakeupWord[wakeupWords.size()]));
    }

    /**
     * 移除唤醒词
     * <pre>{@code
     * mEngine.removeWakeupword(new WakeupWord("xiao bu xiao bu", 0.49f, 0.21f, 0, 0));
     * mEngine.removeWakeupword("xiao bu xiao bu");
     * }</pre>
     *
     * @param wakeupWord 移除的唤醒词
     */
    public synchronized void removeWakeupword(WakeupWord... wakeupWord) {
        if (wakeupWord == null || wakeupWord.length == 0)
            return;
        if (wakeupWord.length == mapWakeupWord.size()) {
            Log.d(TAG, "removeWakeupword() delete all not allowed");
            return;
        }
        for (WakeupWord w : wakeupWord) {
            if (w.isValid())
                mapWakeupWord.remove(w.getWakeupWord());
        }
        setDynamicWord();
    }

    public synchronized void removeWakeupword(String... wakeupWord) {
        if (wakeupWord == null || wakeupWord.length == 0)
            return;
        if (wakeupWord.length == mapWakeupWord.size()) {
            Log.d(TAG, "removeWakeupword()2 delete all not allowed");
            return;
        }
        for (String s : wakeupWord) {
            if (!TextUtils.isEmpty(s))
                mapWakeupWord.remove(s);
        }
        setDynamicWord();
    }

    public synchronized WakeupWord[] getWakeupword() {
        return mapWakeupWord.values().toArray(new WakeupWord[mapWakeupWord.size()]);
    }

    public synchronized void setWakeupword(List<WakeupWord> wakeupWords) {
        if (wakeupWords == null || wakeupWords.isEmpty())
            return;
        setWakeupword(wakeupWords.toArray(new WakeupWord[wakeupWords.size()]));
    }

    /**
     * 动态设置唤醒词
     * <pre>{@code
     *  mEngine.setWakeupword(new WakeupWord("xiao bu xiao bu", 0.49f, 0.21f, 0, 0),
     *                         new WakeupWord("xiao la hao ke", 0.38f, 0, 1, 0));
     * }</pre>
     *
     * @param wakeupWord 唤醒词，包括唤醒词，阈值，major等属性
     */
    public synchronized void setWakeupword(WakeupWord... wakeupWord) {
        if (wakeupWord == null || wakeupWord.length == 0)
            return;
        mapWakeupWord.clear();
        for (WakeupWord w : wakeupWord) {
            if (w.isValid())
                mapWakeupWord.put(w.getWakeupWord(), w);
        }
        setDynamicWord();
    }

    public synchronized Collection<WakeupWord> getWakeupwordList() {
        return mapWakeupWord.values();
    }

    private synchronized void setDynamicWord() {
        if (mapWakeupWord.isEmpty()) {
            Log.d(TAG, "setDynamicWord() mapWakeupWord is empty");
            return;
        }

        Iterator<String> iter = mapWakeupWord.keySet().iterator();
        StringBuilder sbWord = new StringBuilder();
        StringBuilder sbThreshold = new StringBuilder();
        StringBuilder sbLowThreshold = new StringBuilder();
        StringBuilder sbMajor = new StringBuilder();
        StringBuilder sbDcheck = new StringBuilder();
        while (iter.hasNext()) {
            String s = iter.next();
            WakeupWord wakeupWord = mapWakeupWord.get(s);

            sbWord.append(wakeupWord.getWakeupWord());
            sbThreshold.append(wakeupWord.getThreshold());
            sbLowThreshold.append(wakeupWord.getLowThreshold());
            sbMajor.append(wakeupWord.getMajor());
            sbDcheck.append(wakeupWord.getDcheck());
            if (iter.hasNext()) {
                sbWord.append(",");
                sbThreshold.append(",");
                sbLowThreshold.append(",");
                sbMajor.append(",");
                sbDcheck.append(",");
            }
        }

        StringBuilder sb = new StringBuilder();
        sb.append("words=").append(sbWord.toString())
                .append(";thresh=").append(sbThreshold.toString())
                .append(";thresh2=").append(sbLowThreshold.toString())
                .append(";major=").append(sbMajor.toString())
                .append(";dcheck=").append(sbDcheck.toString()).append(";");

        // 动态设置唤醒env
        JSONObject setJson = new JSONObject();
        try {
            setJson.put("env", sb.toString());
        } catch (JSONException e) {
            e.printStackTrace();
        }
        if (mFespxProcessor != null)
            mFespxProcessor.set(setJson.toString());
    }

    private synchronized void parseDynamicParamEnv(Map<String, ?> dynamicParam) {
        if (dynamicParam == null || dynamicParam.get("env") == null)
            return;
        final String env = dynamicParam.get("env").toString();
        if (TextUtils.isEmpty(env))
            return;
        Log.d(TAG, "parseDynamicParamEnv() env " + env);
        String[] wakeupWord = null;
        String[] threshold = new String[0];
        String[] lowThreshold = new String[0];
        String[] major = new String[0];
        String[] dcheck = new String[0];

        String[] list = env.split(";");
        for (String s : list) {
            if (s.contains("words") && s.contains("=")) {
                wakeupWord = calWakeupWords(s);
            } else if (s.contains("thresh") && s.contains("=")) {
                threshold = s.split("=")[1].trim().split(",");
            } else if (s.contains("thresh2") && s.contains("=")) {
                lowThreshold = s.split("=")[1].trim().split(",");
            } else if (s.contains("major") && s.contains("=")) {
                major = s.split("=")[1].trim().split(",");
            } else if (s.contains("dcheck") && s.contains("=")) {
                dcheck = s.split("=")[1].trim().split(",");
            }
        }
        calWakeupMaps(wakeupWord, threshold, lowThreshold, major, dcheck);
    }

    private void calWakeupMaps(String[] wakeupWord, String[] threshold, String[] lowThreshold, String[] major, String[] dcheck) {
        if (wakeupWord == null || wakeupWord.length == 0)
            return;

        mapWakeupWord.clear();
        for (int i = 0; i < wakeupWord.length; i++) {
            float t = 0;
            float t2 = 0;
            int m = 0;
            int d = 0;
            t = calThreshold(threshold, i, t);

            t2 = calThreshold(lowThreshold, i, t2);

            m = calMajor(major, i, m);

            d = calMajor(dcheck, i, d);

            WakeupWord wd = new WakeupWord(wakeupWord[i], t, t2, m, d);
            mapWakeupWord.put(wakeupWord[i], wd);
            Log.d(TAG, "parseDynamicParamEnv() " + wd);
        }
    }

    private String[] calWakeupWords(String s) {
        String[] wakeupWord;
        List<String> listWords = Arrays.asList(s.split("=")[1].trim().split(","));
        for (int i = listWords.size() - 1; i >= 0; i--) {
            String w1 = listWords.get(i);
            if (w1.replace(" ", "").length() == 0) {
                listWords.remove(w1);
            }
        }
        wakeupWord = new String[listWords.size()];
        listWords.toArray(wakeupWord);
        return wakeupWord;
    }

    private int calMajor(String[] major, int i, int m) {
        try {
            m = major.length > i ? Integer.parseInt(major[i].trim()) : 0;
        } catch (Exception e) {
            //do nothing
        }
        return m;
    }

    private float calThreshold(String[] threshold, int i, float t) {
        try {
            t = threshold.length > i ? Float.parseFloat(threshold[i].trim()) : 0f;
        } catch (Exception e) {
            //do nothing
        }
        return t;
    }

    private synchronized void parseConfigWakeupword(String[] wakeupWord, float[] threshold, float[] lowThreshold, int[] major, int[] dcheck) {
        if (wakeupWord == null || wakeupWord.length == 0)
            return;

        if (threshold == null)
            threshold = new float[0];
        if (lowThreshold == null)
            lowThreshold = new float[0];
        if (major == null)
            major = new int[0];
        if (dcheck == null)
            dcheck = new int[0];

        mapWakeupWord.clear();
        for (int i = 0; i < wakeupWord.length; i++) {
            float t = threshold.length > i ? threshold[i] : 0f;
            float t2 = lowThreshold.length > i ? lowThreshold[i] : 0f;
            int m = major.length > i ? major[i] : 0;
            int d = dcheck.length > i ? dcheck[i] : 0;

            WakeupWord wd = new WakeupWord(wakeupWord[i], t, t2, m, d);
            mapWakeupWord.put(wakeupWord[i], wd);
            Log.d(TAG, "parseConfigWakeupword: " + wd);
        }
    }

    public void resetDriveMode() {
        if (mFespxProcessor != null)
            mFespxProcessor.resetDriveMode();
    }

    /**
     * The adapter for convert SpeechListener to AILocalSignalAndWakeupListener.
     */
    private class SpeechListenerImpl extends SpeechListener {
        AILocalSignalAndWakeupListener mListener;

        public SpeechListenerImpl(AILocalSignalAndWakeupListener listener) {
            mListener = listener;
        }

        public void setListener(AILocalSignalAndWakeupListener listener) {
            mListener = listener;
        }

        @Override
        public void onError(AIError error) {
            if (mListener != null) {
                mListener.onError(error);
            }
        }

        @Override
        public void onInit(int status) {
            if (mListener != null) {
                mListener.onInit(status);
            }
        }


        @Override
        public void onDoaResult(int doa) {
            if (mListener != null) {
                mListener.onDoaResult(doa);
            }
        }

        @Override
        public void onNearInformation(String json) {
            if (mListener != null) {
                mListener.onNearInformation(json);
            }
        }

        @Override
        public void onSevcNoiseResult(String retString) {
            if (mListener != null) {
                mListener.onSevcNoiseResult(retString);
            }
        }

        @Override
        public void onSevcDoaResult(int doa) {
            if (mListener != null) {
                mListener.onSevcDoaResult(doa);
            }
        }

        @Override
        public void onResults(AIResult result) {
            if (result.getResultType() == AIConstant.AIENGINE_MESSAGE_TYPE_JSON) {
                if (result.getResultType() == AIConstant.AIENGINE_MESSAGE_TYPE_JSON) {
                    try {
                        String resultInfo = result.getResultObject().toString();
                        JSONObject obj = new JSONObject(resultInfo);
                        double confidence = obj.getDouble("confidence");
                        String wakeupWord = obj.getString("wakeupWord");
                        int status = obj.getInt("status");
                        if (mListener != null) {
                            mListener.onWakeup(resultInfo);
                            if (status == 0 || status == 1 || status == 2) {
                                mListener.onWakeup(confidence, wakeupWord);
                            }
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            }
        }

        @Override
        public void onRawDataReceived(byte[] buffer, int size) {
            if (mListener != null) {
                mListener.onRawDataReceived(buffer, size);
            }
        }

        @Override
        public void onResultDataReceived(byte[] buffer, int size, int wakeupType) {
            if (mListener != null) {
                mListener.onResultDataReceived(buffer, size, wakeupType);
            }
        }

        @Override
        public void onInputDataReceived(byte[] data, int size) {
            if (mListener != null) {
                mListener.onInputDataReceived(data, size);
            }
        }

        @Override
        public void onOutputDataReceived(byte[] data, int size) {
            if (mListener != null) {
                mListener.onOutputDataReceived(data, size);
            }
        }

        @Override
        public void onEchoDataReceived(byte[] data, int size) {
            if (mListener != null) {
                mListener.onEchoDataReceived(data, size);
            }
        }

        @Override
        public void onEndOfSpeech() {
            //do nothing
        }


        @Override
        public void onReadyForSpeech() {
            if (mListener != null) {
                mListener.onReadyForSpeech();
            }
        }

        @Override
        public void onBeginningOfSpeech() {
            //do nothing
        }

        @Override
        public void onRmsChanged(float rmsdB) {
            //do nothing
        }

        /**
         * 废弃使用
         *
         * @deprecated
         */
        @Override
        @Deprecated
        public void onRecorderStopped() {
            //do nothing
        }


        @Override
        public void onEvent(int eventType, Map params) {
            //do nothing
        }

        @Override
        public void onVprintCutDataReceived(int dataType, byte[] data, int size) {
            if (mListener != null) {
                try {
                    mListener.onVprintCutDataReceived(dataType, data, size);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }

        @Override
        public void onNotOneShot() {
            //do nothing
        }

        @Override
        public void onAgcDataReceived(byte[] buffer) {
            if (mListener != null) {
                mListener.onAgcDataReceived(buffer, buffer.length);
            }
        }

        @Override
        public void onMultibfDataReceived(byte[] data, int length, int index) {
            if (mListener != null) {
                mListener.onMultibfDataReceived(data, data.length, index);
            }
        }

        @Override
        public void onEchoVoipDataReceived(byte[] data, int length) {
            if (mListener != null) {
                mListener.onEchoVoipDataReceived(data, data.length);
            }
        }
    }

}
